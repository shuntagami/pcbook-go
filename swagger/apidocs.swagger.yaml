swagger: "2.0"
info:
  title: google/api/http.proto
  version: version not set
tags:
- name: AuthService
- name: LaptopService
consumes:
- application/json
produces:
- application/json
paths:
  /v1/auth/login:
    post:
      operationId: AuthService_Login
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/pcbookLoginResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/pcbookLoginRequest'
      tags:
      - AuthService
  /v1/laptop/create:
    post:
      operationId: LaptopService_CreateLaptop
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/pcbookCreateLaptopResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/pcbookCreateLaptopRequest'
      tags:
      - LaptopService
  /v1/laptop/rate:
    post:
      operationId: LaptopService_RateLaptop
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/pcbookRateLaptopResponse'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of pcbookRateLaptopResponse
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
      - name: body
        description: ' (streaming inputs)'
        in: body
        required: true
        schema:
          $ref: '#/definitions/pcbookRateLaptopRequest'
      tags:
      - LaptopService
  /v1/laptop/search:
    get:
      operationId: LaptopService_SearchLaptop
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/pcbookSearchLaptopResponse'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of pcbookSearchLaptopResponse
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
      - name: filter.maxPriceUsd
        in: query
        required: false
        type: number
        format: double
      - name: filter.minCpuCores
        in: query
        required: false
        type: integer
        format: int64
      - name: filter.minCpuGhz
        in: query
        required: false
        type: number
        format: double
      - name: filter.minRam.value
        in: query
        required: false
        type: string
        format: uint64
      - name: filter.minRam.unit
        in: query
        required: false
        type: string
        enum:
        - UNKNOWN
        - BIT
        - BYTE
        - KILOBYTE
        - MEGABYTE
        - GIGABYTE
        - TERABYTE
        default: UNKNOWN
      tags:
      - LaptopService
  /v1/laptop/upload_image:
    post:
      operationId: LaptopService_UploadImage
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/pcbookUploadImageResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
      - name: body
        description: ' (streaming inputs)'
        in: body
        required: true
        schema:
          $ref: '#/definitions/pcbookUploadImageRequest'
      tags:
      - LaptopService
definitions:
  KeyboardLayout:
    type: string
    enum:
    - UNKNOWN
    - QWERTY
    - QWERTZ
    - AZERTY
    default: UNKNOWN
  MemoryUnit:
    type: string
    enum:
    - UNKNOWN
    - BIT
    - BYTE
    - KILOBYTE
    - MEGABYTE
    - GIGABYTE
    - TERABYTE
    default: UNKNOWN
  ScreenPanel:
    type: string
    enum:
    - UNKNOWN
    - IPS
    - OLED
    default: UNKNOWN
  ScreenResolution:
    type: object
    properties:
      width:
        type: integer
        format: int64
      height:
        type: integer
        format: int64
  StorageDriver:
    type: string
    enum:
    - UNKNOWN
    - HDD
    - SSD
    default: UNKNOWN
  pcbookCPU:
    type: object
    properties:
      brand:
        type: string
      name:
        type: string
      numberCores:
        type: integer
        format: int64
      numberThreads:
        type: integer
        format: int64
      minGhz:
        type: number
        format: double
      maxGhz:
        type: number
        format: double
  pcbookCreateLaptopRequest:
    type: object
    properties:
      laptop:
        $ref: '#/definitions/pcbookLaptop'
  pcbookCreateLaptopResponse:
    type: object
    properties:
      id:
        type: string
  pcbookFilter:
    type: object
    properties:
      maxPriceUsd:
        type: number
        format: double
      minCpuCores:
        type: integer
        format: int64
      minCpuGhz:
        type: number
        format: double
      minRam:
        $ref: '#/definitions/pcbookMemory'
  pcbookGPU:
    type: object
    properties:
      brand:
        type: string
      name:
        type: string
      minGhz:
        type: number
        format: double
      maxGhz:
        type: number
        format: double
      memory:
        $ref: '#/definitions/pcbookMemory'
  pcbookImageInfo:
    type: object
    properties:
      laptopId:
        type: string
      imageType:
        type: string
        title: image type, such as .jpg or .png
  pcbookKeyboard:
    type: object
    properties:
      layout:
        $ref: '#/definitions/KeyboardLayout'
      backlit:
        type: boolean
  pcbookLaptop:
    type: object
    properties:
      id:
        type: string
      brand:
        type: string
      name:
        type: string
      cpu:
        $ref: '#/definitions/pcbookCPU'
      ram:
        $ref: '#/definitions/pcbookMemory'
      gpus:
        type: array
        items:
          $ref: '#/definitions/pcbookGPU'
      storages:
        type: array
        items:
          $ref: '#/definitions/pcbookStorage'
      screen:
        $ref: '#/definitions/pcbookScreen'
      keyboard:
        $ref: '#/definitions/pcbookKeyboard'
      weightKg:
        type: number
        format: double
      weightLb:
        type: number
        format: double
      priceUsd:
        type: number
        format: double
      releaseYear:
        type: integer
        format: int64
      updatedAt:
        type: string
        format: date-time
  pcbookLoginRequest:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
  pcbookLoginResponse:
    type: object
    properties:
      accessToken:
        type: string
  pcbookMemory:
    type: object
    properties:
      value:
        type: string
        format: uint64
      unit:
        $ref: '#/definitions/MemoryUnit'
  pcbookRateLaptopRequest:
    type: object
    properties:
      laptopId:
        type: string
      score:
        type: number
        format: double
  pcbookRateLaptopResponse:
    type: object
    properties:
      laptopId:
        type: string
      ratedCount:
        type: integer
        format: int64
      averageScore:
        type: number
        format: double
  pcbookScreen:
    type: object
    properties:
      sizeInch:
        type: number
        format: float
      resolution:
        $ref: '#/definitions/ScreenResolution'
      panel:
        $ref: '#/definitions/ScreenPanel'
      multitouch:
        type: boolean
  pcbookSearchLaptopResponse:
    type: object
    properties:
      laptop:
        $ref: '#/definitions/pcbookLaptop'
  pcbookStorage:
    type: object
    properties:
      driver:
        $ref: '#/definitions/StorageDriver'
      memory:
        $ref: '#/definitions/pcbookMemory'
  pcbookUploadImageRequest:
    type: object
    properties:
      info:
        $ref: '#/definitions/pcbookImageInfo'
      chunkData:
        type: string
        format: byte
  pcbookUploadImageResponse:
    type: object
    properties:
      id:
        type: string
      size:
        type: integer
        format: int64
    title: UploadImageResponse will be returned to the client once the server has
      received all chunks of the image
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
      message:
        type: string
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
      details:
        type: array
        items:
          $ref: '#/definitions/protobufAny'
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
    description: |-
      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      [google.rpc.Code][google.rpc.Code], but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` that can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    title: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:
